package mines.ga.string.multi;

import mines.ga.chrom.ChromosomeBuilder;
import java.util.*;

/**
 * Builder class for multi-array-based chromosomes.
 */

public class MultiStringChromosomeBuilder implements ChromosomeBuilder<MultiStringChromosome> {

	private int[] maxValues;	//maximum values for each string, exclusive.
	private int numStrings;		//number of strings per chromosome.
	private int[] fixedLength;	//length of each string, 0 if variable length.

	/**
	 * Builder constructor.
	 * Sets all strings to variable length.
	 *
	 * @see	other constructor
	 */
	public MultiStringChromosomeBuilder(int[] maxValues, int numStrings) {
		this(maxValues,numStrings,new int[numStrings]);
	}

	/**
	 * Builder constructor.
	 *
	 * @param	maxValues	an array of maximum values for each string, exclusive.
	 * @param	numStrings	the number of strings per chromosome.
	 * @param	fixedLength	the length of each string, 0 if variable length.
	 */
	public MultiStringChromosomeBuilder(int[] maxValues, int numStrings, int[] fixedLength) {
		this.maxValues = maxValues;
		this.numStrings = numStrings;
		this.fixedLength = fixedLength;
	}

	/**
	 * Creates a random chromosome.
	 * Each value is uniformly chosen between 0, inclusive,
	 * and the max value for that string, exclusive.
	 * String length is generated by an exponential distribution with mean equal to the max value,
	 * for variable length strings,
	 * otherwise set to the preset fixed length.
	 *
	 * @param	rng	the RNG.
	 * @return	a randomly generated MultiStringChromosome
	 */
	public MultiStringChromosome getRandomChromosome(Random rng) {
		int[][] string = new int[numStrings][];
		for (int i=0; i<numStrings; i++) {
			int length = (fixedLength[i] > 0 ? fixedLength[i] : Math.max((int) (maxValues[i] * -Math.log(rng.nextDouble())),1));
			string[i] = new int[length];
			for (int j=0; j<length; j++) {
				string[i][j] = rng.nextInt(maxValues[i]);
			}
		}
		return new MultiStringChromosome(string);
	}

}